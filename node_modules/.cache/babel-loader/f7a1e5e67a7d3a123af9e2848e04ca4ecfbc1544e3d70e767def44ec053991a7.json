{"ast":null,"code":"import _objectSpread from \"C:/Users/oreor/Desktop/website/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/oreor/Desktop/website/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"onUpdate\", \"onComplete\"];\nimport { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nvar acceleratedValues = new Set([\"opacity\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nvar sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  var onUpdate = _ref.onUpdate,\n    onComplete = _ref.onComplete,\n    options = _objectWithoutProperties(_ref, _excluded);\n  var canAccelerateAnimation = supports.waapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0;\n  if (!canAccelerateAnimation) return false;\n  var keyframes = options.keyframes,\n    _options$duration = options.duration,\n    duration = _options$duration === void 0 ? 300 : _options$duration,\n    _options$elapsed = options.elapsed,\n    elapsed = _options$elapsed === void 0 ? 0 : _options$elapsed,\n    ease = options.ease;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n  if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n    /**\n     * If we need to pre-generate keyframes and repeat is infinite then\n     * early return as this will lock the thread.\n     */\n    if (options.repeat === Infinity) return;\n    var sampleAnimation = animate(_objectSpread(_objectSpread({}, options), {}, {\n      elapsed: 0\n    }));\n    var state = {\n      done: false,\n      value: keyframes[0]\n    };\n    var pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n    var t = 0;\n    while (!state.done && t < 20000) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n  var animation = animateStyle(value.owner.current, valueName, keyframes, _objectSpread(_objectSpread({}, options), {}, {\n    delay: -elapsed,\n    duration: duration,\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease\n  }));\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n  animation.onfinish = function () {\n    value.set(getFinalKeyframe(keyframes, options));\n    sync.update(function () {\n      return animation.cancel();\n    });\n    onComplete && onComplete();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n  return {\n    get currentTime() {\n      return animation.currentTime || 0;\n    },\n    set currentTime(t) {\n      animation.currentTime = t;\n    },\n    stop: function stop() {\n      /**\n       * WAAPI doesn't natively have any interruption capabilities.\n       *\n       * Rather than read commited styles back out of the DOM, we can\n       * create a renderless JS animation and sample it twice to calculate\n       * its current value, \"previous\" value, and therefore allow\n       * Motion to calculate velocity for any subsequent animation.\n       */\n      var currentTime = animation.currentTime;\n      if (currentTime) {\n        var _sampleAnimation = animate(_objectSpread(_objectSpread({}, options), {}, {\n          autoplay: false\n        }));\n        value.setWithVelocity(_sampleAnimation.sample(currentTime - sampleDelta).value, _sampleAnimation.sample(currentTime).value, sampleDelta);\n      }\n      sync.update(function () {\n        return animation.cancel();\n      });\n    }\n  };\n}\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["sync","animate","animateStyle","isWaapiSupportedEasing","supports","getFinalKeyframe","acceleratedValues","Set","sampleDelta","createAcceleratedAnimation","value","valueName","onUpdate","onComplete","options","canAccelerateAnimation","waapi","has","repeatDelay","repeatType","damping","keyframes","duration","elapsed","ease","type","repeat","Infinity","sampleAnimation","state","done","pregeneratedKeyframes","t","sample","push","animation","owner","current","delay","onfinish","set","update","cancel","currentTime","stop","autoplay","setWithVelocity"],"sources":["C:/Users/oreor/Desktop/website/node_modules/framer-motion/dist/es/animation/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\"opacity\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0;\n    if (!canAccelerateAnimation)\n        return false;\n    let { keyframes, duration = 300, elapsed = 0, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n        /**\n         * If we need to pre-generate keyframes and repeat is infinite then\n         * early return as this will lock the thread.\n         */\n        if (options.repeat === Infinity)\n            return;\n        const sampleAnimation = animate({ ...options, elapsed: 0 });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < 20000) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        delay: -elapsed,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        sync.update(() => animation.cancel());\n        onComplete && onComplete();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        get currentTime() {\n            return animation.currentTime || 0;\n        },\n        set currentTime(t) {\n            animation.currentTime = t;\n        },\n        stop: () => {\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animate({ ...options, autoplay: false });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            sync.update(() => animation.cancel());\n        },\n    };\n}\n\nexport { createAcceleratedAnimation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}